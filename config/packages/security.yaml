security:
    #acl:
    # connection: default
    enable_authenticator_manager: true
    # hi√©rarchie des roeles
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    #Liste des hasher de mot de passe Sonata et Security
    password_hashers:
        Sonata\UserBundle\Model\UserInterface: auto
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # Listes de nos providers
    providers:
        sonata_user_bundle:
            id: sonata.user.security.user_provider

        app_user_provider:
            entity:
                # the class of the entity that represents users
                class: App\Entity\User
                # the property to query by - e.g. email, username, etc
                property: email
                # optional: if you're using multiple Doctrine entity
                # managers, this option defines which one to use
                #manager_name: 'customer'

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    #password_hashers:
    #    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # Listes des firewalls (parfeu)
    firewalls:
        #dev:
        #    pattern: ^/(_(profiler|wdt)|css|images|js)/
        #    security: false

        # Firewall for my client
        main:
            lazy: true
            pattern: /
            provider: app_user_provider
            entry_point: App\Security\AppClientAuthenticator
            custom_authenticator: App\Security\AppClientAuthenticator
            #anonymous: true
            form_login:
                login_path: app_login_client
            logout:
                path: app_logout_client
                # where to redirect after logout
                target: app_client_accueil



        # firewal for my admin with Sonata
        admin:
            pattern: /admin(.*)
            context: user
            provider: sonata_user_bundle
            form_login:
                login_path: app_admin_login
                check_path: app_admin_login
                default_target_path: sonata_admin_dashboard
            logout:
                path: app_admin_logout
                target: app_admin_login
            remember_me:
                secret: '%env(APP_SECRET)%'
                lifetime: 2629746
                path: /admin/dashboard
            entry_point: App\Security\UserSonataAuthenticator
            custom_authenticator: App\Security\UserSonataAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    
        #- { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/admin/login, role: PUBLIC_ACCESS }
        - { path: ^/admin/logout, role: PUBLIC_ACCESS }
        - { path: ^/admin/register, role: PUBLIC_ACCESS }
        - { path: ^/admin/login_check, role: PUBLIC_ACCESS }
        #- { path: ^/login_check$, role: PUBLIC_ACCESS }
        #- { path: ^/admin/request, role: PUBLIC_ACCESS }
        #- { path: ^/admin/check-email, role: PUBLIC_ACCESS }
        #- { path: ^/profile, roles: ROLE_USER }
        #- { path: ^/admin/reset/.*$, role: PUBLIC_ACCESS }
        #- { path: ^/admin/dashboard, role: ROLE_SPECIAL_USER }
        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to you needs
        
        - { path: ^/admin/utilisateurs/list, role: ROLE_SUPER_ADMIN }
        - { path: ^/admin/utilisateurs/create, role: ROLE_SUPER_ADMIN }
        - { path: ^/admin/utilisateurs/delete, role: ROLE_SUPER_ADMIN }
        - { path: ^/admin/utilisateurs/show, role: ROLE_SUPER_ADMIN }
        - { path: ^/admin/, role: ROLE_ADMIN }
        - { path: ^/.*, role: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
